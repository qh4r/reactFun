module.exports = [{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;","examples":[{"name":"EyeIcon","description":"","code":"import React from 'react';\nimport EyeIcon from \"../../../components/EyeIcon/EyeIcon\";\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}"}]},{"name":"Hello","description":"Simple greeting component","props":{"msg":{"type":{"name":"string"},"required":true,"description":"Message to be displayed","defaultValue":{"value":"'Jake'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Simple greeting component */\r\nconst Hello = ({msg}) => {\r\n  return (<div>\r\n    Hello {msg}\r\n  </div>)\r\n};\r\n\r\nHello.propTypes = {\r\n  // descriptions that get rendered must be made with multiline comments\r\n  /** Message to be displayed */\r\n  msg: PropTypes.string.isRequired,\r\n};\r\n\r\nHello.defaultProps = {\r\n  msg: 'Jake',\r\n}\r\n\r\nexport default Hello;","examples":[{"name":"ExampleHello","description":"Hello usage example","code":"import React from 'react';\r\nimport Hello from '../../../components/Hello';\r\n\r\n/** Hello usage example */\r\nconst ExampleHello = () => {\r\n  return <Hello msg=\"funky people\"/>\r\n};\r\n\r\nexport default ExampleHello;"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","examples":[{"name":"OptionalExample","description":"Optional label","code":"import React from 'react';\nimport Label from \"../../../components/Label/Label\";\n\n/** Optional label */\nexport default function OptionalExample() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}"},{"name":"RequiredExample","description":"Required label","code":"import React from 'react';\nimport Label from \"../../../components/Label/Label\";\n\n/** Required label */\nexport default function RequiredExample() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from \"../TextInput/TextInput\";\nimport EyeIcon from \"../EyeIcon/EyeIcon\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\n\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from \"../../../components/PasswordInput/PasswordInput\";\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"},{"name":"ExampleJustToggleVisibility","description":"Just toggle visibility enabled","code":"import React from 'react';\nimport PasswordInput from \"../../../components/PasswordInput/PasswordInput\";\n\n/** Just toggle visibility enabled */\nclass ExampleJustToggleVisibility extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-just-toggle-visibility\"\n          name=\"password\"\n          onChange={(event) => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          showVisibilityToggle\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleJustToggleVisibility;\n"}]},{"name":"ProgressBar","description":"Display progress between 0 and 100 percent on colorful horizontal bar.","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Display progress between 0 and 100 percent on colorful horizontal bar. */\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  // Show this when using Enzyme to unit test func\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","examples":[{"name":"Example100Percent","description":"","code":"import React from 'react';\nimport ProgressBar from \"../../../components/ProgressBar/ProgressBar\";\n\nexport default function Example20Percent() {\n  return <ProgressBar percent={100} width={300}/>\n}"},{"name":"Example20Percent","description":"","code":"import React from 'react';\nimport ProgressBar from \"../../../components/ProgressBar/ProgressBar\";\n\nexport default function Example20Percent() {\n  return <ProgressBar percent={20} width={200}/>\n}"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation.","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering!\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport PasswordInput from \"../PasswordInput/PasswordInput\";\nimport TextInput from \"../TextInput/TextInput\";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from 'react';\nimport RegistrationForm from \"../../../components/RegistrationForm/RegistrationForm\";\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from \"../Label/Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInput from \"../../../components/TextInput/TextInput\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"},{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\nimport TextInput from \"../../../components/TextInput/TextInput\";\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputBem","description":"Abstraction over text input to enforce consistency in validation, labels, and required field marker.\nUsing BEM to encapsulate styling.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label/Label';\n\n/**\n * Abstraction over text input to enforce consistency in validation, labels, and required field marker.\n * Using BEM to encapsulate styling.\n */\nfunction TextInputBEM({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    //BLOCK, ELEMENT, MODIFIER\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        className={error && 'textinput__input--state-error'}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n","examples":[{"name":"ExampleError","description":"With error","code":"import React from 'react';\nimport TextInputBEM from \"../../../components/TextInputBem/TextInputBem\";\n\n/** With error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-error\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputCssModules","description":"TextInput using CSS Modules","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label/Label';\nimport styles from './textInput.css';\n\n// ENABLING CSS MODULES MAKES THEM REQUIRED FOR ALL STYLES\n//to enable css modules you need to add 2 lines to webpack config\n//modules: true,\n  //localIdentName: '[name]_[local]_[hash:base64:5]',\n\n/** TextInput using CSS Modules */\nfunction TextInputCssModules ({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        className={error && styles.inputError}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInputCssModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCssModules;\n","examples":[{"name":"Example","description":"With CSS Modules","code":"import React from 'react';\nimport TextInputCssModules from \"../../../components/TextInputCssModules/TextInputCssModules\";\n\n/**\n * With CSS Modules\n */\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <div>\n        <TextInputCssModules\n          htmlId=\"text-input-css-modules-no-error\"\n          label=\"No Error\"\n          name=\"firstname\"\n          onChange={() => {}}\n          required\n        />\n\n        <TextInputCssModules\n          htmlId=\"text-input-css-modules-with-error\"\n          label=\"With Error\"\n          name=\"firstname\"\n          onChange={() => {}}\n          required\n          error=\"First name is required.\"\n        />\n      </div>\n    )\n  }\n}\n"}]},{"name":"TextInputInlineStylesThemed","description":"Themeable textInput styled using React's inline styles.\nSome styles are overridden based on the theme prop.\nNote how some of the component's built-in styles are always enforced.\nFor example, the input always has a red border when an error occurs,\neven though the theme allows overriding the non-error state.\nNote that you could centralize styling variables in a js\nfile if used in multiple components.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"},"theme":{"type":{"name":"object"},"required":false,"description":"Theme","defaultValue":{"value":"{fontColor: 'black', accentColor: 'darkgray', borderWidth: '1px'}","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label/Label';\nimport defaultTheme from './defaultTheme';\n\n/**\n * Themeable textInput styled using React's inline styles.\n * Some styles are overridden based on the theme prop.\n * Note how some of the component's built-in styles are always enforced.\n * For example, the input always has a red border when an error occurs,\n * even though the theme allows overriding the non-error state.\n * Note that you could centralize styling variables in a js\n * file if used in multiple components.\n */\nfunction TextInputInlineStylesThemed({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, theme={fontColor: 'black', accentColor: 'darkgray', borderWidth: '1px'}, ...props}) {\n  // Allow overriding the default input border color via theme.\n  // But always set border color to the defaultTheme's error border (red) when there is an error.\n  const inputBorderColor = (error && error.length > 0) ? defaultTheme.error.color : theme.accentColor;\n  let inputStyle = {\n    color: theme.fontColor,\n    border: `solid ${theme.borderWidth} ${inputBorderColor}`,\n    display: 'block'\n  };\n\n  return (\n    <div style={{marginBottom: defaultTheme.fieldset.marginBottom}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={inputStyle}\n        {...props}/>\n        {children}\n      {error && <div style={{color: defaultTheme.error.color}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInputInlineStylesThemed.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node,\n\n  /** Theme */\n  theme: PropTypes.object\n};\n\nexport default TextInputInlineStylesThemed;\n","examples":[{"name":"ExampleInlineStylesThemed","description":"With inline styles and theme support. Note how the theme allows setting a different border color for the input, but it doesn't allow overriding the red border for error states.","code":"import React from 'react';\nimport TextInputInlineStylesThemed from '../../../components/TextInputInlineStylesThemed';\n\nconst uglyTheme = {fontColor: 'green', accentColor: 'orange', borderWidth: '5px'};\n\n/**\n * With inline styles and theme support. Note how the theme allows setting a different border color for the input, but it doesn't allow overriding the red border for error states.\n */\nexport default class ExampleInlineStylesThemed extends React.Component {\n  render() {\n    return (\n      <div>\n        <TextInputInlineStylesThemed\n          htmlId=\"inline-styles-themed\"\n          label=\"With no error\"\n          name=\"firstname\"\n          onChange={() => {}}\n          required\n          theme={uglyTheme}\n        />\n\n        <TextInputInlineStylesThemed\n          htmlId=\"inline-styles-themed-with-error\"\n          label=\"With error\"\n          name=\"firstname\"\n          onChange={() => {}}\n          required\n          error=\"First Name is required.\"\n          theme={uglyTheme}\n        />\n      </div>\n    )\n  }\n}\n"}]},{"name":"TextInputStyledComponents","description":"TextInput using styled-components","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label/Label';\nimport styled from 'styled-components';\n\n/**\n * TextInput using styled-components\n */\nfunction TextInputStyledComponents({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props} />\n      {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;\n","examples":[{"name":"ExampleWithError","description":"Input with error","code":"import React from 'react';\nimport TextInputStyledComponents from '../../../components/TextInputStyledComponents';\n\n/**\n * Input with error\n */\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"styled-components-with-error\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"},{"name":"ExampleWithoutError","description":"Input without error","code":"import React from 'react';\nimport TextInputStyledComponents from '../../../components/TextInputStyledComponents';\n\n/**\n * Input without error\n */\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"styled-components-no-error\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputStyledComponentsThemed","description":"TextInput using styled-components","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"},"theme":{"type":{"name":"object"},"required":false,"description":"Theme","defaultValue":{"value":"{ main: 'orange' }","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label/Label';\nimport styled from 'styled-components';\n\n/**\n * TextInput using styled-components\n */\nfunction TextInputStyledComponentsThemed({name, htmlId, label, type = \"text\", required = false, onChange, placeholder, value, error, children, theme={ main: 'orange' }, ...props}) {\n\n  const ErrorText = styled.div`\n    color: red;\n  `\n\n  const isError = !!error;\n\n  const Input = styled.input`\n    border: ${isError && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n      {children}\n    {error && <ErrorText>{error}</ErrorText>}\n    </Fieldset>\n  );\n};\n\nTextInputStyledComponentsThemed.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node,\n\n  /** Theme */\n  theme: PropTypes.object\n};\n\nexport default TextInputStyledComponentsThemed;\n","examples":[{"name":"Example","description":"TextInput with two different themes applied","code":"import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport TextInput from '../../../components/TextInput/TextInput';\n\nconst ThemedTextInput = styled(TextInput)`\n  color: ${props => props.theme.fontColor};\n  border: solid ${props => props.theme.borderWidth} ${props => props.theme.accentColor};\n`;\n\n// Create a plain theme\nconst plainTheme = {\n  fontColor: 'black',\n  accentColor: 'lightgrey',\n  borderWidth: '1px'\n};\n\n// Create an ugly theme\nconst uglyTheme = {\n  fontColor: 'green',\n  accentColor: 'red',\n  borderWidth: '5px'\n};\n\n/**\n * TextInput with two different themes applied\n */\nconst MyApp = () => {\n  return (\n    <div>\n      {/* All children of this component will receieve the plain theme via React's context */}\n      <ThemeProvider theme={plainTheme}>\n        <ThemedTextInput\n          htmlId=\"themed-input-plain\"\n          label=\"Text input with plain theme\"\n          name=\"plain\"\n          onChange={() => {}} />\n      </ThemeProvider>\n      {/* All children of this component will receive the ugly theme via React's context */}\n      <ThemeProvider theme={uglyTheme}>\n        <ThemedTextInput\n          htmlId=\"themed-input-ugly\"\n          label=\"Text input with ugly theme\"\n          name=\"ugly\"\n          onChange={() => {}} />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default MyApp;\n"}]}]